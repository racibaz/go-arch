// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"github.com/racibaz/go-arch/internal/modules/post/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPostRepository creates a new instance of MockPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRepository {
	mock := &MockPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostRepository is an autogenerated mock type for the PostRepository type
type MockPostRepository struct {
	mock.Mock
}

type MockPostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRepository) EXPECT() *MockPostRepository_Expecter {
	return &MockPostRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) Delete(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPostRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *MockPostRepository_Expecter) Delete(id interface{}) *MockPostRepository_Delete_Call {
	return &MockPostRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockPostRepository_Delete_Call) Run(run func(id string)) *MockPostRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepository_Delete_Call) Return(err error) *MockPostRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepository_Delete_Call) RunAndReturn(run func(id string) error) *MockPostRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) GetByID(id string) (*domain.Post, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.Post, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.Post); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockPostRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *MockPostRepository_Expecter) GetByID(id interface{}) *MockPostRepository_GetByID_Call {
	return &MockPostRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockPostRepository_GetByID_Call) Run(run func(id string)) *MockPostRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepository_GetByID_Call) Return(post *domain.Post, err error) *MockPostRepository_GetByID_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostRepository_GetByID_Call) RunAndReturn(run func(id string) (*domain.Post, error)) *MockPostRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsExists provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) IsExists(title string, description string) (bool, error) {
	ret := _mock.Called(title, description)

	if len(ret) == 0 {
		panic("no return value specified for IsExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return returnFunc(title, description)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(title, description)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(title, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepository_IsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExists'
type MockPostRepository_IsExists_Call struct {
	*mock.Call
}

// IsExists is a helper method to define mock.On call
//   - title string
//   - description string
func (_e *MockPostRepository_Expecter) IsExists(title interface{}, description interface{}) *MockPostRepository_IsExists_Call {
	return &MockPostRepository_IsExists_Call{Call: _e.mock.On("IsExists", title, description)}
}

func (_c *MockPostRepository_IsExists_Call) Run(run func(title string, description string)) *MockPostRepository_IsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepository_IsExists_Call) Return(b bool, err error) *MockPostRepository_IsExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockPostRepository_IsExists_Call) RunAndReturn(run func(title string, description string) (bool, error)) *MockPostRepository_IsExists_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) List() ([]*domain.Post, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*domain.Post, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*domain.Post); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPostRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockPostRepository_Expecter) List() *MockPostRepository_List_Call {
	return &MockPostRepository_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockPostRepository_List_Call) Run(run func()) *MockPostRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPostRepository_List_Call) Return(posts []*domain.Post, err error) *MockPostRepository_List_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockPostRepository_List_Call) RunAndReturn(run func() ([]*domain.Post, error)) *MockPostRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) Save(post *domain.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockPostRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - post *domain.Post
func (_e *MockPostRepository_Expecter) Save(post interface{}) *MockPostRepository_Save_Call {
	return &MockPostRepository_Save_Call{Call: _e.mock.On("Save", post)}
}

func (_c *MockPostRepository_Save_Call) Run(run func(post *domain.Post)) *MockPostRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Post
		if args[0] != nil {
			arg0 = args[0].(*domain.Post)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepository_Save_Call) Return(err error) *MockPostRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepository_Save_Call) RunAndReturn(run func(post *domain.Post) error) *MockPostRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) Update(post *domain.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPostRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - post *domain.Post
func (_e *MockPostRepository_Expecter) Update(post interface{}) *MockPostRepository_Update_Call {
	return &MockPostRepository_Update_Call{Call: _e.mock.On("Update", post)}
}

func (_c *MockPostRepository_Update_Call) Run(run func(post *domain.Post)) *MockPostRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Post
		if args[0] != nil {
			arg0 = args[0].(*domain.Post)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepository_Update_Call) Return(err error) *MockPostRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepository_Update_Call) RunAndReturn(run func(post *domain.Post) error) *MockPostRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
