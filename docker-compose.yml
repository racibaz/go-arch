version: '3.7'
services:
  app:
    build: .
    container_name: ${APP_NAME:-go-arch}-app
    volumes:
      - .:/app
    ports:
      - "8080:8080"
      - "9090:9090"
    networks:
      - app-network

  postgres:
    hostname: postgres
    image: postgres:latest
    container_name: ${APP_NAME:-go-arch}-db
    restart: always
    volumes:
      - ./docker/postgresql/tmp:/var/lib/postgresql/data
      - app-data:/var/lib/postgresql/data
    ports:
      - ${DB_PORT}:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    networks:
        - app-network

  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    networks:
      - app-network

volumes:
  app-data:

networks:
  app-network:
    driver: bridge